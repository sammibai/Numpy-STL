from stl import mesh
import math
import numpy

data = numpy.zeros(6, dtype=mesh.Mesh.dtype)

# Top
data['vectors'][0] = numpy.array([[0, 1, 1],
                                  [1, 0, 1],
                                  [0, 0, 1]])
data['vectors'][1] = numpy.array([[1, 0, 1],
                                  [0, 1, 1],
                                  [1, 1, 1]])
# Front
data['vectors'][2] = numpy.array([[1, 0, 0],
                                  [1, 0, 1],
                                  [1, 1, 0]])
data['vectors'][3] = numpy.array([[1, 1, 1],
                                  [1, 0, 1],
                                  [1, 1, 0]])
# Venstre
data['vectors'][4] = numpy.array([[0, 0, 0],
                                  [1, 0, 0],
                                  [1, 0, 1]])
data['vectors'][5] = numpy.array([[0, 0, 0],
                                  [0, 0, 1],
                                  [1, 0, 1]])


data['vectors'] -= .5

meshes = [mesh.Mesh(data.copy()) for _ in range(4)]

meshes[0].rotate([0.0, 0.5, 0.0], math.radians(90))

meshes[2].rotate([0.5, 0.0, 0.0], math.radians(90))

meshes[3].rotate([0.5, 0.0, 0.0], math.radians(90))
meshes[3].rotate([0.0, 0.5, 0.0], math.radians(90))



from matplotlib import pyplot
from mpl_toolkits import mplot3d

figure = pyplot.figure()
axes = mplot3d.Axes3D(figure)

for m in meshes:
    axes.add_collection3d(mplot3d.art3d.Poly3DCollection(m.vectors))

scale = numpy.concatenate([m.points for m in meshes]).flatten()
axes.auto_scale_xyz(scale, scale, scale)

pyplot.show()
